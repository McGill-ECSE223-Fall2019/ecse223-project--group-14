namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;

class PawnBehavior {

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;
	
	StepMove stagedStep;
	JumpMove stagedJump;
	
	boolean isValid;
	int row;
	int col;
	String side;
		
    pawnSM {
    	Placed{
    		initiateDiagonalJump(int row, int col, String side) -> /{
    			initPawn(row,col,side);
    		}  JumpingDiagonal;
    		initiateStep(int row, int col, String side) -> /{
    			initPawn(row,col,side);
    		}  Stepping;
    		initiateStraightJump(int row, int col, String side) -> /{
    			initPawn(row,col,side);
    		}  JumpingStraight;
    	}
		Stepping{
			entry / {isValid = isLegalStep();};
			
		}
	    JumpingStraight{
	    	entry / {isValid = isLegalJump();};
		}
		JumpingDiagonal{
			entry / {isValid = isLegalJumpDiag();};
		}
		
	}
    // Returns the current row number of the pawn
    int getCurrentPawnRow() { 
    	GamePosition pos = QuoridorApplication.getQuoridor().getCurrentPosition();
    	Player currentPlayer = pos.getPlayerToMove();
    	if (currentPlayer.hasGameAsWhite())(
	    	return pos.getWhitePosition().getTile().getRow();
	    else{
	    	return pos.getBlackPosition().getTile().getRow();
	    }
    }
    
    
    
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() {
    	GamePosition pos = QuoridorApplication.getQuoridor().getCurrentPosition();
    	Player currentPlayer = pos.getPlayerToMove();
    	if (currentPlayer.hasGameAsWhite())(
	    	return pos.getWhitePosition().getTile().getCol();
	    else{
	    	return pos.getBlackPosition().getTile().getCol();
	    }
    }
    // Returns if it is legal to step in the given direction
    boolean isLegalStep(MoveDirection dir) { return false; }
    // Returns if it is legal to jump in the given direction
    boolean isLegalJump(MoveDirection dir) { 
    	int row = getCurrentPawnRow();
		int col = getCurrentPawnCol();
		
		Quoridor quoridor = QuoridorApplication.getQuoridor();
		Board board = quoridor.getBoard();
		
		if(dir == MoveDirection.North){
			boolean destExists = (board.getTile(getIndex(row-2, col)) != -1);
			boolean opponentJumpable = (getOpponentPawnTile().equals(getTile(getIndex(row-1, col))));
		
			// Check if jump destination even exists
			if(destExists && opponentJumpable &&){
			}
		} else if(dir == MoveDirection.South){
			stagedStep = new StepMove(row+1, col, ...);
		} else if(dir == MoveDirection.West){
			stagedStep = new StepMove(row, col-1, ...);
		} else if(dir == MoveDirection.East){
			stagedStep = new StepMove(row, col+1, ...);
		}
		
    	return false;
    }
    
    boolean isLegalJumpDiag() { 
    	int opRow = getOpponentRow();
    	int opCol = getOpponentCol();
    	
    	int curRow = getCurrentPawnRow();
    	int curCol = getCurrentPawnColumn();
    	
    	String opSide = isOpponentAdjecent(curRow,curCol,opRow,opCol);
    	
		if(this.side.equals("upleft")){
			if(opSide.equals("up")){
				if(wallBlocking(opSide,false)){
				}
			}
			else if (opSide.equals("left")){
				
			}
		} else if(this.side.equals("upright")){
			
		} else if(this.side.equals("downleft")){
			move = new JumpMove(row, col-1, ...);
		} else if(this.side.equals("downright")){
			move = new JumpMove(row, col+1, ...);
		}
		
    	return false;
    }
    
	void initPawn(int row,int col,String side){
		this.row = row;
		this.col = col;
		this.side = side;
	}
	
	boolean wallBlocking(String opSide,boolean isStep){
		int curRow = getCurrentPawnRow();
    	int curCol = getCurrentPawnColumn();
    	
    	if(isStep && wallExistsAt(){
    		//TODO
    	}
    }
    
    boolean wallExistsAt(int row, int col){
    	GamePosition pos = QuoridorApplication.getQuoridor().getCurrentPosition().
    	//TODO
    	for white
    		if (pos...)
    			return true;
    	for black
	    	if (...)
	    			return true;
	    			
	    return false;
    }
	
    // Action to be called when an illegal move is attempted
    void illegalMove() { }
    
    
    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    enum MoveDirection { East, South, West, North; }
}
